From d5f49f1328e5c610b7fe46e753bc536d611e879d Mon Sep 17 00:00:00 2001
From: Dimitry Ishenko <dimitry.ishenko@gmail.com>
Date: Tue, 18 Oct 2022 15:03:10 -0400
Subject: [PATCH 4/5] Don't check compatibility

---
 lib/Interpreter/CIFactory.cpp | 32 --------------------------------
 1 file changed, 32 deletions(-)

diff --git a/lib/Interpreter/CIFactory.cpp b/lib/Interpreter/CIFactory.cpp
index 6f87cfa5..9fc484f3 100644
--- a/lib/Interpreter/CIFactory.cpp
+++ b/lib/Interpreter/CIFactory.cpp
@@ -473,36 +473,6 @@ namespace {
     Opts.CharIsSigned = std::numeric_limits<char>::is_signed;
   }
 
-  // This must be a copy of clang::getClangToolFullVersion(). Luckily
-  // we'll notice quickly if it ever changes! :-)
-  static std::string CopyOfClanggetClangToolFullVersion(StringRef ToolName) {
-    cling::stdstrstream OS;
-#ifdef CLANG_VENDOR
-    OS << CLANG_VENDOR;
-#endif
-    OS << ToolName << " version " CLANG_VERSION_STRING " "
-       << getClangFullRepositoryVersion();
-
-    // If vendor supplied, include the base LLVM version as well.
-#ifdef CLANG_VENDOR
-    OS << " (based on LLVM " << PACKAGE_VERSION << ")";
-#endif
-
-    return OS.str();
-  }
-
-  ///\brief Check the compile-time clang version vs the run-time clang version,
-  /// a mismatch could cause havoc. Reports if clang versions differ.
-  static void CheckClangCompatibility() {
-    if (clang::getClangToolFullVersion("cling")
-        != CopyOfClanggetClangToolFullVersion("cling"))
-      cling::errs()
-        << "Warning in cling::CIFactory::createCI():\n  "
-        "Using incompatible clang library! "
-        "Please use the one provided by cling!\n";
-    return;
-  }
-
   /// \brief Retrieves the clang CC1 specific flags out of the compilation's
   /// jobs. Returns NULL on error.
   static const llvm::opt::ArgStringList*
@@ -1239,8 +1209,6 @@ namespace {
     // Create an instance builder, passing the LLVMDir and arguments.
     //
 
-    CheckClangCompatibility();
-
     const size_t argc = COpts.Remaining.size();
     const char* const* argv = &COpts.Remaining[0];
     std::vector<const char*> argvCompile(argv, argv+1);
-- 
2.34.1

